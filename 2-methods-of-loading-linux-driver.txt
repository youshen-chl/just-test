*******************************************************************
Linux中 驱动模块的加载过程
###################################################################
一、insmod 是靠一个在kernel/module.c里定义的系统调用来实现的。

	1. 此系统调用（sys_init_module）分配内核存储空间（kernelmemory）给相关的模块，这个内存分配动作是由vmalloc完成；
	2. 然后将该模块内容拷贝到这块存储空间里；
	3. 接着声明内核引用该模块；
	4. 呼叫该模块的初始化涵数
	这样，一个插入模块的过程就完成了。

	该函数准确应该是在 linux/kernel/module.c里，但是在里面你不会找到 sys_init_module这个函数，因为这个函数是通过一个宏来实现的：

	SYSCALL_DEFINE3(init_module, void __user *, umod,
			unsigned long, len, const char __user *, uargs)

		=> mod = load_module(umod, len, uargs);
		//这个函数将模块从用户空间拷贝到内核空间，并对模块文件进行解析，重定向后以便系统使用
		=> if (mod->init != NULL)
			 ret = do_one_initcall(mod->init); 
			 //这个函数的主要功能实际是调用mod->init（模块的初始化函数）

二、 模块的module_init/module_exit解析
	
	a.一个驱动可以作为一个模块动态的加载到内核里，
	b.也可以作为内核的一部分静态的编译进内核，

	module_init/module_exit也就有了两个含义：
	
	a.驱动作为内核一部分时：
	module_init(x)  = static initcall_t __initcall_x6 __attribute_used__   __attribute__((__section__(".initcall" 6".init"))) = x
	
	b.驱动作为模块时：
	/* Each module must use one module_init(). */
	#define module_init(initfn)					\
		static inline initcall_t __inittest(void)		\
		{ return initfn; }					\
		int init_module(void) __attribute__((alias(#initfn)));

		首先我们可以发现发现module_init有两个含义：
		1、验证加载函数的格式
		static inline initcall_t __inittest(void) \
			{ return initfn; }
		这个函数的作用是验证我们穿过来的加载函数格式是否正确，linux内核规定加载函数的原型是：
			typedef int (*initcall_t)(void);
		所以我们写加载函数的时候必须是返回值为int参数为void的函数，这个在内核里要求比较严格，我们写加载函数的时候必须按照这个约定。
		2、定义别名
		int init_module(void) __attribute__((alias(#initfn)));
		这段代码的作用是给我们的加载函数定义一个别名，别名就是我们前面提到的init_module，这样insmod就能够执行我们的加载函数了。


 ********************modprobe 与 insmod的区别********************
modprobe 能 实现 insmod的功能， 而且比insmod要强大一些。
它在加载模块的时候，自己检查模块里有没有一些symbol在内核里没有定义的，如果有这样的symbol，modprobe函数会搜索其他模块，看其他模块里有没有相关的symbol，如果有，则将此模块也一起加载，这样的话，就算模块里有一些没有定义的symbol也能成功加载。但如果用insmod去加载的话，遇到这种情况就会加载失败。会出现"unresolved symbols"信息。


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

*******************************************************************
kernel初始化以及驱动作为内核一部分时module_init(x)解析
###################################################################
一、kernel大致的初始化流程为：
	start_parisc     // init arm  	(setup.c   kernel/\arch\parisc\kernel ）
 	=>start_kernel  			   	(main .c   kernel/init/   )
 	=>rest_init						(main .c   kernel/init/ )
 	=>kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);  
 									(main .c   kernel/init/)
	=>kernel_init 					(main .c   kernel/init/)
	=>do_basic_setup
	=>do_initcalls
	=>do_one_initcall //这个函数的主要功能实际是调用数组元素所指向的初始化函数

二、在do_initcalls函数中，会有这样一个调用：
for (fn = __early_initcall_end; fn < __initcall_end; fn++)
	do_one_initcall(*fn);


三、__early_initcall_end和  __initcall_end是怎么来的呢？
（vmlinux.lds.h:）

#define INITCALLS							\
	*(.initcallearly.init)						\
	VMLINUX_SYMBOL(__early_initcall_end) = .;			\
  	*(.initcall0.init)						\
  	*(.initcall0s.init)						\
  	*(.initcall1.init)						\
  	*(.initcall1s.init)						\
  	*(.initcall2.init)						\
  	*(.initcall2s.init)						\
  	*(.initcall3.init)						\
  	*(.initcall3s.init)						\
  	*(.initcall4.init)						\
  	*(.initcall4s.init)						\
  	*(.initcall5.init)						\
  	*(.initcall5s.init)						\
	*(.initcallrootfs.init)						\
  	*(.initcall6.init)						\
  	*(.initcall6s.init)						\
  	*(.initcall7.init)						\
  	*(.initcall7s.init)

#define INIT_CALLS							\
		VMLINUX_SYMBOL(__initcall_start) = .;			\
		INITCALLS						\
		VMLINUX_SYMBOL(__initcall_end) = .;


四、 module_init(x)解析

#define __init __section(.init.text) __cold notrace    //  __init开头的函数均会被放置到init.txt，并且只会被调用一次
#define device_initcall(fn) __define_initcall("6",fn,6)  //  device的level为6
#define __define_initcall(level,fn)   static initcall_t __initcall_##fn __attribute_used__   __attribute__((__section__(".initcall" level ".init"))) = fn
#define module_init(x) __initcall(x);
#define __initcall(fn) device_initcall(fn)
由上面的宏定义关系不难得出module_init的真正表达式：
module_init(x)  = static initcall_t __initcall_x6 __attribute_used__   __attribute__((__section__(".initcall" 6".init"))) = x
即定义了initcall_t类型的变量 _initcall_x 保存了X的地址,并 将其存放在 .initcall6.init，运行时由连接器vmlinux.lds 装入指定内存。


故在上述do_initcalls的循环中，vmlinux将可执行的init文件都装入指定的内存地址，按照初始化的优先级，依次调用各自模块的init函数，从而初始化设备。

